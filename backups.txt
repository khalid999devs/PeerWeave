import React, { useEffect, useState } from 'react';
import { IconButton } from '../../../Assets/Components/IconButtons';
import { VscSend } from 'react-icons/vsc';
import { MdAttachFile } from 'react-icons/md';
import { useDropzone } from 'react-dropzone';
import axios from 'axios';

const ChatRoom = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [ws, setWs] = useState(null);
  const [username, setUsername] = useState('');

  useEffect(() => {
    const socket = new WebSocket('ws://localhost:8000');

    socket.addEventListener('open', () => {
      console.log('Connected to server');
      setWs(socket);
    });

    socket.addEventListener('message', (event) => {
      setMessages((prevMessages) => [...prevMessages, JSON.parse(event.data)]);
    });

    socket.addEventListener('close', () => {
      console.log('Disconnected from server');
    });

    // Clean up the WebSocket connection on component unmount
    return () => {
      socket.close();
    };
  }, []);

  const sendMessage = () => {
    if (input.trim() !== '' && ws) {
      const message = {
        text: input,
        sender: username,
        type: 'text',
      };
      ws.send(JSON.stringify(message));
      setInput('');
    }
  };

  const handleDrop = (acceptedFiles) => {
    acceptedFiles.forEach(async (file) => {
      if (file.type === 'application/x-moz-file' && file.size === 0) {
        return; // Skip empty folders (Firefox specific)
      }

      const message = {
        text: file.name,
        sender: username,
        type: file.isDirectory ? 'folder' : 'file',
      };

      // ws.send(JSON.stringify(message));
      console.log(file, message);
      if (file.isDirectory) {
        handleNestedFiles(file, '');
      } else {
        const formData = new FormData();
        formData.append('file', file);

        try {
          await axios.post('http://localhost:5000/upload', formData, {
            headers: {
              'Content-Type': 'multipart/form-data',
            },
          });
        } catch (error) {
          console.error('Error uploading file:', error);
        }
      }
    });
  };

  const handleNestedFiles = (directory, parentPath) => {
    directory.webkitEntries.forEach(async (entry) => {
      const fullPath = `${parentPath}/${entry.name}`;

      if (entry.isDirectory) {
        const message = {
          text: fullPath,
          sender: username,
          type: 'folder',
        };

        // ws.send(JSON.stringify(message));
        handleNestedFiles(entry, fullPath);
      } else {
        const formData = new FormData();
        formData.append('file', entry);

        try {
          await axios.post('http://localhost:5000/upload', formData, {
            headers: {
              'Content-Type': 'multipart/form-data',
            },
          });
        } catch (error) {
          console.error('Error uploading file:', error);
        }
      }
    });
  };

  const { getRootProps, getInputProps } = useDropzone({
    onDrop: handleDrop,
    directory: true,
    webkitdirectory: true,
  });

  return (
    <div
      className='w-full h-full flex flex-col justify-between p-2 px-3'
      {...getRootProps()}
    >
      <div className='flex flex-row justify-between items-center '>
        <div>Hi</div>
        <div>Hell</div>
      </div>
      <div className='chat-body flex flex-col-reverse h-full overflow-y-auto gap-2 text-sm py-3'>
        <div className='flex flex-row p-2 py-1 rounded-md justify-start items-center bg-primary-main'>
          Hi
        </div>
        <div className='flex flex-row p-2 py-1 rounded-md justify-end items-center bg-primary-blue'>
          Hello
        </div>
      </div>
      <div
        className='grid place-items-center gap-1 max-h-[80px] mt-2 w-full'
        style={{ gridTemplateColumns: 'auto 1fr auto' }}
      >
        <div className='h-full'>
          <div>
            <input {...getInputProps()} directory='' webkitdirectory='' />
            <IconButton
              icon={<MdAttachFile />}
              children={<></>}
              classes={'bg-primary-blue hover:bg-primary-main'}
            />
          </div>
        </div>
        <div className='flex flex-row justify-center items-center rounded-md '>
          <input
            type='text'
            placeholder='message...'
            className='px-2 w-full h-full py-1 rounded-md bg-onPrimary-main text-sm text-primary-main border-none'
          />
        </div>
        <div className='h-full'>
          <IconButton
            icon={<VscSend />}
            classes={'bg-primary-blue hover:bg-primary-main'}
          />
        </div>
      </div>
    </div>
  );
};

export default ChatRoom;









let directoryStructure=[
  {type:"folder",name:"",children:[{type:"file",name:"",file:{}},{type:"folder",name:"",children:[]},...]},
  {type:"file",name:"",file:{}}
]
